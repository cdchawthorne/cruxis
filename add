#!/usr/bin/env zsh

function usage {
    echo "usage: cruxis $(basename $0) -p wep [-k] ESSID" 1>&2
    echo "       cruxis $(basename $0) -p wpa ESSID" 1>&2
    echo "       cruxis $(basename $0) -f WPA_SUPPLICANT_CONF_FILE" 1>&2
    echo "must be run as root" 1>&2
}

function extract_ssid {
    sed -rn -e 's_^[[:blank:]]*ssid="(.*)"$_\1_p' $1
}

zparseopts -D p:=protocol_opt f:=wpa_conf_file_opt k=key_opt

# some unreadable usage checks
[[ $((${#protocol_opt} ^^ ${#wpa_conf_file_opt})) -gt 0 ]] || { usage; exit 1; }
[[ ${#protocol_opt} -gt 0 || ${#key_opt} -eq 0 ]] || { usage; exit 1; }
[[ ${#protocol_opt} -eq 0 || ${protocol_opt[2]} =~ "wep|wpa" ]] || { usage; exit 1; }
[[ $(($# ^^ ${#wpa_conf_file_opt})) -gt 0 ]] || { usage; exit 1; }
[[ $(whoami) == root ]] || { usage; exit 1; }

cruxis_dir=/etc/cruxis
networks_file=${cruxis_dir}/networks
base_networks_dir=${cruxis_dir}/networks.d

# Somewhat abstruse logic for finding the smallest unused network number
function find-next-dir {
    networks=$(ls ${base_networks_dir} | sort -g)

    if [[ -z ${networks} || 0 -ne $(head -n 1 <<< ${networks}) ]]; then
        echo ${base_networks_dir}/0
        return 0
    fi

    while true; do
        network=$(head -n 1 <<< ${networks})
        networks=$(tail -n +2 <<< ${networks})

        if [[ -z ${networks} || $((${network}+1)) -ne $(head -n 1 <<< ${networks}) ]]; then
            echo ${base_networks_dir}/$((${network}+1))
            return 0
        fi
    done
}

{
    if ! flock -n 9; then
        echo "cruxis: could not acquire networks lock" 1>&2
        exit 1
    fi
    ssid=$1
    new_network_dir=$(find-next-dir)
    mkdir ${new_network_dir}
    if [[ ${#wpa_conf_file_opt} -gt 0 ]]; then
        extract_ssid ${wpa_conf_file_opt[2]} > ${new_network_dir}/ssid
        cp ${wpa_conf_file_opt[2]} ${new_network_dir}/wpa_supplicant.conf
        chown root:root ${new_network_dir}/wpa_supplicant.conf
        chmod go-rwx ${new_network_dir}/wpa_supplicant.conf
    elif [[ ${protocol_opt[2]} == wpa ]]; then
        builtin read -s 'key?Enter wireless key: '
        echo
        echo ${ssid} > ${new_network_dir}/ssid
        wpa_passphrase ${ssid} <<< ${key} > ${new_network_dir}/wpa_supplicant.conf
        chmod go-rwx ${new_network_dir}/wpa_supplicant.conf
    elif [[ ${#key_opt} -gt 0 ]]; then
        builtin read -s 'key?Enter wireless key: '
        echo
        echo ${ssid} > ${new_network_dir}/ssid
        echo ${key} > ${new_network_dir}/key
        chmod go-rwx ${new_network_dir}/key
    else
        echo ${ssid} > ${new_network_dir}/ssid
    fi

    basename ${new_network_dir} >> ${networks_file}
} 9> ${cruxis_dir}/.networks_lock

echo "Network ${ssid} successfully added in directory ${new_network_dir}" 1>&2
